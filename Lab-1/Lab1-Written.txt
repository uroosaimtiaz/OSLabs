1.
When os.fork() is called, the memory space of the parent process
is duplicated in the child process. Thus, the variable Total is
equal to 0 in both the child and the parent process.

The child process will execute the rest of the code after it is
created until it is exited. The code that only the child process
will run on based on the condition that pid equals 0 is:

    else:  # Child process
        Total += B(x)
        os._exit(0)  # Ensure the child process terminates here

The child process's variable Total is updated by recursive function 
B that calculates the sum from x/2 to x. However, the changes to 
Total are local to the child process, so after the child is exited
the changes to Total are discarded along with the child's resources.

The Total that is printed by the parent process is simply from
updating Total with the function call A(x):

    if pid != 0:  # Parent process
        Total += A(x)

Which means that Total = the sum from 0 to x/2, which is what gets
printed. It prints 0 for n = 1 since A(x) = sum in range (0,1) = 0;
if the child process's total was saved by the parent process then
Total = A(1) + B(1) = 0 + 1 would output the correct amount which is
Total = 1.

The program predictably returns incorrect computations for different 
values, example 1 for n = 2, 1 for n = 3, 3 for n = 4, and so on.

2.
The program can be modified to output the correct result by 
incorporating some form of inter-process communication and execution 
control. Because the parent process returns the Total value, it must
wait for the child process to finish executing before printing the Total
and then combine the two computations and return the Total.

The way to implement this using only os.wait() and os.exit() is to use
the wait() function to get the parent to wait for the child to finish 
executing prior to or at the specific point in the code where it needs
the child's output, and return the child's Total as an exit code using
the exit() function.

The os.wait() function returns a tuple with the child's pid and exit
status shifted left by 8 bits. The actual exit-codes you can express
are from 0 - 255, because the exit status is stored in 8 bits. When this 
value is exceeded (eg. 257), then the exit code (Total) will be Total%256,
which in this case will be one. Due to the way that the os.wait() function
operates, the value is shifted 8 bits to the left, which is the same as 
multiplying the exit code by 256, which means the parent process recieves an
exit code of 256 whether the original total was 1 or 257. To compensate for 
this, the bits are shifted 8 to the right, which undoes the multiplication.

Because the exit code represents the total of the child process, which sums
from x/2 to x, this imposes a lower upper limit for the value of x compared
to if it were representing the sum from 0 to x/2.

The modification is:
   if pid != 0:  # Parent process
        child_pid, exit_status = os.wait()
        child_total = exit_status >> 8
        Total += A(x)
        Total = child_total + Total
    else:  # Child process
        Total += B(x)
        os._exit(Total)  # Ensure the child process terminates here

The other way to implement this is to modify the function calls of the
parent and child process such that they compute opposite halves of the sum,
which makes the overall x that you can enter higher.

This would be:

    if pid != 0:  # Parent process
        child_pid, exit_status = os.wait()
        child_total = exit_status >> 8
        Total += B(x)
        Total = child_total + Total
    else:  # Child process
        Total += A(x)
        os._exit(Total)  # Ensure the child process terminates here
3.
4. 
When the functions of the parent and child processes are switched - with 
the parent process using B(x) and the child process using A(x) - the 
limitation due to the 8-bit status still applies, but now it applies to 
the sum calculated by the child process. The issue arises when the sum of 
numbers from 0 to (n/2) exceeds 255. The largest value of n for which the 
returned sum remains correct is n = 45. Starting from n = 46, the returned 
sum is incorrect due to the 8-bit limitation of the exit status. Therefore, 
the value of n when the returned sum becomes incorrect is 46.
